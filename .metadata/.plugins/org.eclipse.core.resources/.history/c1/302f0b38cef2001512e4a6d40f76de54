package trees;
import java.util.Iterator;

public class BQueue<Item> implements Iterable<Item>{

	private QueueNode front;
	private QueueNode back;
	private int size;

	private class QueueNode {
	private Item value;
	private QueueNode next;
	private QueueNode prev;

		public QueueNode(Item v){
			this.setValue(v);
		}

		public Item getValue() {
			return value;
		}

		public void setValue(Item value) {
			this.value = value;
		}

		public QueueNode getNext() {
			return next;
		}

		public void setNext(QueueNode next) {
			this.next = next;
		}

		public QueueNode getPrev() {
			return prev;
		}

		public void setPrev(QueueNode prev) {
			this.prev = prev;
		}
	}
	
	public BQueue(){
		this.front = null;
		this.back = null;
		this.size = 0;
	}
	
	public int getSize(){
		return this.size;
	}
	
	public void enqueue(Item v){
		QueueNode newNode = new QueueNode(v);
		if(size == 0){
			this.front = newNode;
			this.back = newNode;
		}
		else{
			this.back.setNext(newNode);
			this.back = newNode;
		}
	}

	public Item dequeue(){
		if (this.size == 0){
			System.err.printf("The Queue is empty and cannot dequeue");
			return null;
		}
		else{
			Item frontItem = this.front.value;
			this.front= front.next;
			this.size--;
			if(this.size ==0){
				this.back = null;
			}
			return frontItem;
		}
	}
	
	public Item peek(){
		if (this.size ==0){
			return null;
		}
		else{
			return this.front.value;
		}
	}

	@Override
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	
	private class ListIterator implements Iterator<Item>{
		private QueueNode cur = front;
		
		public boolean hasNext() {
			if(cur != null){
				return true;
			}
			else{
				return false;
			}
		}
		
		public Item next() {
			if(hasNext() == true){
				Item temp = cur.value;
				cur = cur.next;
				return temp;
			}
			else{
				return null;
			}
		}

	}
	
}

