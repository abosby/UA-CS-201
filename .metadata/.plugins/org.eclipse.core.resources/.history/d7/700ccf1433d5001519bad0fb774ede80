import java.util.LinkedList;
import java.util.Queue;

public class BinarySearchTree {

	//Private
	BinaryNode root;


	/** Constructor for the Binary Search Tree
	 * 
	 */
	public BinarySearchTree(){
		root = null;
	}

	public void insertNode(String v){

		if(this.root == null){
			BinaryNode n = new BinaryNode(v);
			this.root = n;
		}
		else{
			this.root.insertNode(v);
		}

	}

	public void preOrderTraversal(BinaryNode n){
		//Print Node
		System.out.println("|" + n.getValue() + "|");
		//Go Left
		if(n.getLeft()!= null){
			preOrderTraversal(n.getLeft());
		}
		//Go Right
		if(n.getRight()!= null){
			preOrderTraversal(n.getRight());
		}
	}
	
	//Need to implement Queue class
	public void levelOrderTraversal(BinaryNode n){
		Queue<BinaryNode> queue= new LinkedList<BinaryNode>();
		queue.add(n);
		while(!queue.isEmpty()){
			BinaryNode temp = queue.poll();
			System.out.printf("%s ", temp.getValue());
			if(temp.getLeft() != null){
				queue.add(temp.getLeft());
			}
			if(temp.getRight() != null){
				queue.add(temp.getRight());
			}

		}
	}

}
